{"version":3,"file":"chunks/705.ae5626ba7a4f050d2994.min.js","mappings":"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","sources":["webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/basepattern.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/registry.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/logging.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/parser.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/uuid.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/events.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/utils.js","webpack://casc-site/./node_modules/@patternslib/patternslib/src/core/dom.js"],"sourcesContent":["/**\n * A Base pattern for creating scoped patterns.\n *\n * Each instance of a pattern has its own local scope.\n * A new instance is created for each DOM element on which a pattern applies.\n *\n * For usage, see basepattern.md\n */\nimport events from \"./events\";\nimport logging from \"./logging\";\nimport create_uuid from \"./uuid\";\n\nconst log = logging.getLogger(\"basepattern\");\n\nclass BasePattern {\n    static name; // name of pattern used in Registry.\n    static trigger; // A CSS selector to match elements that should trigger the pattern instantiation.\n    static parser; // Options parser.\n\n    // Parser options\n    parser_group_options = true;\n    parser_multiple = undefined;\n    parser_inherit = true;\n\n    constructor(el, options = {}) {\n        // Make static variables available on instance.\n        this.name = this.constructor.name;\n        this.trigger = this.constructor.trigger;\n        this.parser = this.constructor.parser;\n\n        if (!el) {\n            log.warn(`No element given to pattern ${this.name}.`);\n            return;\n        }\n        if (el.jquery) {\n            el = el[0];\n        }\n        this.el = el;\n        this.uuid = create_uuid();\n\n        // Notify pre-init\n        this.el.dispatchEvent(\n            new Event(`pre-init.${this.name}.patterns`, {\n                bubbles: true,\n                cancelable: true,\n            })\n        );\n\n        // Initialize asynchronously.\n        //\n        // 1) We need to call the concrete implementation of ``init``, but the\n        //    inheritance chain is not yet set up and ``init`` not available.\n        //\n        // 2) We want to wait for the init() to successfuly finish and fire an\n        //    event then.\n        //    But the constructer cannot not return a Promise, thus not be\n        //    asynchronous but only return itself.\n        //\n        // Both limitations are gone in next tick.\n        //\n        window.setTimeout(async () => {\n            if (typeof this.el[`pattern-${this.name}`] !== \"undefined\") {\n                // Do not reinstantiate\n                log.debug(`Not reinstatiating the pattern ${this.name}.`, this.el);\n\n                // Notify that not instantiated\n                this.el.dispatchEvent(\n                    new Event(`not-init.${this.name}.patterns`, {\n                        bubbles: true,\n                        cancelable: false,\n                    })\n                );\n                return;\n            }\n\n            // Create the options object by parsing the element and using the\n            // optional options as default.\n            this.options =\n                this.parser?.parse(\n                    this.el,\n                    options,\n                    this.parser_multiple,\n                    this.parser_inherit,\n                    this.parser_group_options\n                ) ?? options;\n\n            // Store pattern instance on element\n            this.el[`pattern-${this.name}`] = this;\n\n            // Initialize the pattern\n            await this.init();\n\n            // Notify that now ready\n            this.el.dispatchEvent(\n                new Event(`init.${this.name}.patterns`, {\n                    bubbles: true,\n                    cancelable: true,\n                })\n            );\n        }, 0);\n    }\n\n    async init() {\n        // Extend this method in your pattern.\n    }\n\n    emit_update(action = undefined, options = {}) {\n        options = {\n            pattern: this.name,\n            dom: this.el,\n            action: action,\n            ...options,\n        }\n        this.el.dispatchEvent(events.update_event(options));\n    }\n\n    /**\n     * Listen to an event on the element only once.\n     *\n     * @param {string} event_name - Name of the event to listen to.\n     * @param {function} callback - Callback to call when the event is thrown.\n     */\n    one(event_name, event_callback) {\n        events.add_event_listener(\n            this.el,\n            `${event_name}.${this.name}.patterns`,\n            `basepattern-one--${event_name}.${this.name}.patterns`,\n            event_callback,\n            {\n                once: true,\n            }\n        );\n    }\n\n    /**\n     * Destroy/remove/unload the pattern from the element.\n     */\n    destroy() {\n        delete this.el[`pattern-${this.name}`];\n    }\n}\n\nexport default BasePattern;\nexport { BasePattern };\n","/**\n * Patterns registry - Central registry and scan logic for patterns\n *\n * Copyright 2012-2013 Simplon B.V.\n * Copyright 2012-2013 Florian Friesdorf\n * Copyright 2013 Marko Durkovic\n * Copyright 2013 Rok Garbas\n * Copyright 2014-2015 Syslab.com GmBH, JC Brand\n */\n\n/*\n * changes to previous patterns.register/scan mechanism\n * - if you want initialised class, do it in init\n * - init returns set of elements actually initialised\n * - handle once within init\n * - no turnstile anymore\n * - set pattern.jquery_plugin if you want it\n */\nimport $ from \"jquery\";\nimport dom from \"./dom\";\nimport logging from \"./logging\";\nimport utils from \"./utils\";\n\nconst log = logging.getLogger(\"registry\");\nconst disable_re = /patterns-disable=([^&]+)/g;\nconst dont_catch_re = /patterns-dont-catch/g;\nconst disabled = {};\nlet dont_catch = false;\nlet match;\n\nwhile ((match = disable_re.exec(window.location.search)) !== null) {\n    disabled[match[1]] = true;\n    log.info(\"Pattern disabled via url config:\", match[1]);\n}\n\nwhile ((match = dont_catch_re.exec(window.location.search)) !== null) {\n    dont_catch = true;\n    log.info(\"I will not catch init exceptions\");\n}\n\n/**\n * Global pattern registry.\n *\n * This is a singleton and shared among any instance of the Patternslib\n * registry since Patternslib version 8.\n *\n * You normally don't need this as the registry handles it for you.\n */\nif (typeof window.__patternslib_registry === \"undefined\") {\n    window.__patternslib_registry = {};\n}\nexport const PATTERN_REGISTRY = window.__patternslib_registry;\nif (typeof window.__patternslib_registry_initialized === \"undefined\") {\n    window.__patternslib_registry_initialized = false;\n}\n\nconst registry = {\n    patterns: PATTERN_REGISTRY, // reference to global patterns registry\n    // as long as the registry is not initialized, pattern\n    // registration just registers a pattern. Once init is called,\n    // the DOM is scanned. After that registering a new pattern\n    // results in rescanning the DOM only for this pattern.\n    init() {\n        dom.document_ready(() => {\n            if (window.__patternslib_registry_initialized) {\n                // Do not reinitialize a already initialized registry.\n                return;\n            }\n            window.__patternslib_registry_initialized = true;\n            log.debug(\"Loaded: \" + Object.keys(registry.patterns).sort().join(\", \"));\n            registry.scan(document.body);\n            log.debug(\"Finished initial scan.\");\n        });\n    },\n\n    clear() {\n        // Removes all patterns from the registry. Currently only being\n        // used in tests.\n        for (const name in registry.patterns) {\n            delete registry.patterns[name];\n        }\n    },\n\n    transformPattern(name, content) {\n        /* Call the transform method on the pattern with the given name, if\n         * it exists.\n         */\n        if (disabled[name]) {\n            log.debug(`Skipping disabled pattern: ${name}.`);\n            return;\n        }\n\n        const pattern = registry.patterns[name];\n        const transform = pattern.transform || pattern.prototype?.transform;\n        if (transform) {\n            try {\n                transform($(content));\n            } catch (e) {\n                if (dont_catch) {\n                    throw e;\n                }\n                log.error(`Transform error for pattern ${name}.`, e);\n            }\n        }\n    },\n\n    initPattern(name, el, trigger) {\n        /* Initialize the pattern with the provided name and in the context\n         * of the passed in DOM element.\n         */\n        const $el = $(el);\n        const pattern = registry.patterns[name];\n        const plog = logging.getLogger(`pat.${name}`);\n        if (el.matches(pattern.trigger)) {\n            plog.debug(\"Initialising.\", el);\n            try {\n                if (pattern.init) {\n                    // old style initialisation\n                    pattern.init($el, null, trigger);\n                } else {\n                    // class based pattern initialisation\n                    new pattern($el, null, trigger);\n                }\n\n                plog.debug(\"done.\");\n            } catch (e) {\n                if (dont_catch) {\n                    throw e;\n                }\n                plog.error(\"Caught error:\", e);\n            }\n        }\n    },\n\n    orderPatterns(patterns) {\n        // Always add pat-validation as first pattern, so that it can prevent\n        // other patterns from reacting to submit events if form validation\n        // fails.\n        if (patterns.includes(\"validation\")) {\n            patterns.splice(patterns.indexOf(\"validation\"), 1);\n            patterns.unshift(\"validation\");\n        }\n        // Add clone-code to the very beginning - we want to copy the markup\n        // before any other patterns changed the markup.\n        if (patterns.includes(\"clone-code\")) {\n            patterns.splice(patterns.indexOf(\"clone-code\"), 1);\n            patterns.unshift(\"clone-code\");\n        }\n\n        return patterns;\n    },\n\n    scan(content, patterns, trigger) {\n        if (!content) {\n            return;\n        }\n\n        if (typeof content === \"string\") {\n            content = document.querySelector(content);\n        } else if (content instanceof Text) {\n            // No need to scan a TextNode.\n            return;\n        } else if (content.jquery) {\n            content = content[0];\n        }\n\n        const selectors = [];\n        patterns = this.orderPatterns(patterns || Object.keys(registry.patterns));\n        for (const name of patterns) {\n            this.transformPattern(name, content);\n            const pattern = registry.patterns[name];\n            if (pattern.trigger) {\n                selectors.unshift(pattern.trigger);\n            }\n        }\n\n        // Clean up selectors:\n        // - Remove whitespace,\n        // - Remove trailing commas,\n        // - Join to selecto string.\n        const selector_string = selectors.map(\n            (selector) => selector.trim().replace(/,$/, \"\")\n        ).join(\",\");\n\n        // Exit, if no selector.\n        if (!selector_string) {\n            return;\n        }\n\n        let matches = dom.querySelectorAllAndMe(\n            content,\n            selector_string\n        );\n        matches = matches.filter((el) => {\n            // Filter out patterns:\n            // - with class ``.disable-patterns`` or wrapped within.\n            // - wrapped in ``<pre>`` elements\n            // - wrapped in ``<template>`` elements (not reachable anyways)\n            return (\n                !el?.closest?.(\".disable-patterns\") &&\n                !el?.parentNode?.closest?.(\"pre\") &&\n                // BBB. TODO: Remove with next major version.\n                !el?.closest?.(\".cant-touch-this\")\n            );\n        });\n\n        // walk list backwards and initialize patterns inside-out.\n        for (const el of matches.reverse()) {\n            for (const name of patterns) {\n                this.initPattern(name, el, trigger);\n            }\n        }\n        document.body.classList.add(\"patterns-loaded\");\n    },\n\n    register(pattern, name) {\n        name = name || pattern.name;\n        if (!name) {\n            log.error(\"Pattern lacks a name.\", pattern);\n            return false;\n        }\n\n        // Do not register blacklisted patterns.\n        let BLACKLIST = window.__patternslib_patterns_blacklist;\n        if (!Array.isArray(BLACKLIST)) {\n            BLACKLIST = [];\n        }\n        if (BLACKLIST.includes(name)) {\n            log.warn(`Pattern name ${name} is blacklisted.`);\n            return false;\n        }\n\n        if (registry.patterns[name]) {\n            log.debug(`Already have a pattern called ${name}.`);\n            return false;\n        }\n        // register pattern to be used for scanning new content\n        registry.patterns[name] = pattern;\n\n        // register pattern as jquery plugin\n        if (pattern.jquery_plugin) {\n            const plugin_name = (\"pat-\" + name).replace(\n                /-([a-zA-Z])/g,\n                function (match, p1) {\n                    return p1.toUpperCase();\n                }\n            );\n            $.fn[plugin_name] = utils.jqueryPlugin(pattern);\n            // BBB 2012-12-10 and also for Mockup patterns.\n            $.fn[plugin_name.replace(/^pat/, \"pattern\")] = $.fn[plugin_name];\n        }\n        log.debug(`Registered pattern ${name}`, pattern);\n        if (window.__patternslib_registry_initialized) {\n            // Once the first initialization has been done, do only scan for\n            // newly registered patterns.\n            registry.scan(document.body, [name]);\n            log.debug(`Re-scanned dom with newly registered pattern ${name}.`);\n        }\n        return true;\n    },\n};\n\nexport default registry;\n","/**\n * Patterns logging - minimal logging framework\n *\n * Copyright 2012 Simplon B.V.\n */\n\n// source: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\n                \"Function.prototype.bind - what is trying to be bound is not callable\"\n            );\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(\n                    this instanceof fNOP && oThis ? this : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments))\n                );\n            };\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n\n        return fBound;\n    };\n}\n\nvar root, // root logger instance\n    writer; // writer instance, used to output log entries\n\nvar Level = {\n    DEBUG: 10,\n    INFO: 20,\n    WARN: 30,\n    ERROR: 40,\n    FATAL: 50,\n};\n\nfunction ConsoleWriter() {}\n\nConsoleWriter.prototype = {\n    output: function (log_name, level, messages) {\n        if (log_name) messages.unshift(log_name + \":\");\n        if (level <= Level.DEBUG) console.debug.apply(console, messages);\n        else if (level <= Level.INFO) console.info.apply(console, messages);\n        else if (level <= Level.WARN) console.warn.apply(console, messages);\n        else console.error.apply(console, messages);\n    },\n};\n\nfunction Logger(name, parent) {\n    this._loggers = {};\n    this.name = name || \"\";\n    this._parent = parent || null;\n    if (!parent) {\n        this._enabled = true;\n        this._level = Level.WARN;\n    }\n}\n\nLogger.prototype = {\n    getLogger: function (name) {\n        var path = name.split(\".\"),\n            root = this,\n            route = this.name ? [this.name] : [];\n        while (path.length) {\n            var entry = path.shift();\n            route.push(entry);\n            if (!(entry in root._loggers))\n                root._loggers[entry] = new Logger(route.join(\".\"), root);\n            root = root._loggers[entry];\n        }\n        return root;\n    },\n\n    _getFlag: function (flag) {\n        var context = this;\n        flag = \"_\" + flag;\n        while (context !== null) {\n            if (context[flag] !== undefined) return context[flag];\n            context = context._parent;\n        }\n        return null;\n    },\n\n    setEnabled: function (state) {\n        this._enabled = !!state;\n    },\n\n    isEnabled: function () {\n        this._getFlag(\"enabled\");\n    },\n\n    setLevel: function (level) {\n        if (typeof level === \"number\") this._level = level;\n        else if (typeof level === \"string\") {\n            level = level.toUpperCase();\n            if (level in Level) this._level = Level[level];\n        }\n    },\n\n    getLevel: function () {\n        return this._getFlag(\"level\");\n    },\n\n    log: function (level, messages) {\n        if (\n            !messages.length ||\n            !this._getFlag(\"enabled\") ||\n            level < this._getFlag(\"level\")\n        )\n            return;\n        messages = Array.prototype.slice.call(messages);\n        writer.output(this.name, level, messages);\n    },\n\n    debug: function () {\n        this.log(Level.DEBUG, arguments);\n    },\n\n    info: function () {\n        this.log(Level.INFO, arguments);\n    },\n\n    warn: function () {\n        this.log(Level.WARN, arguments);\n    },\n\n    error: function () {\n        this.log(Level.ERROR, arguments);\n    },\n\n    fatal: function () {\n        this.log(Level.FATAL, arguments);\n    },\n};\n\nfunction getWriter() {\n    return writer;\n}\n\nfunction setWriter(w) {\n    writer = w;\n}\n\nsetWriter(new ConsoleWriter());\n\nroot = new Logger();\n\nvar logconfig = /loglevel(|-[^=]+)=([^&]+)/g,\n    match;\n\nwhile ((match = logconfig.exec(window.location.search)) !== null) {\n    var logger = match[1] === \"\" ? root : root.getLogger(match[1].slice(1));\n    logger.setLevel(match[2].toUpperCase());\n}\n\nvar api = {\n    Level: Level,\n    getLogger: root.getLogger.bind(root),\n    setEnabled: root.setEnabled.bind(root),\n    isEnabled: root.isEnabled.bind(root),\n    setLevel: root.setLevel.bind(root),\n    getLevel: root.getLevel.bind(root),\n    debug: root.debug.bind(root),\n    info: root.info.bind(root),\n    warn: root.warn.bind(root),\n    error: root.error.bind(root),\n    fatal: root.fatal.bind(root),\n    getWriter: getWriter,\n    setWriter: setWriter,\n};\n\nexport default api;\n","// Patterns argument parser\nimport $ from \"jquery\";\nimport utils from \"./utils.js\";\nimport logging from \"./logging\";\n\nclass ArgumentParser {\n    constructor(name) {\n        this.order = [];\n        this.parameters = {};\n        this.attribute = \"data-pat-\" + name;\n        this.enum_values = {};\n        this.enum_conflicts = [];\n        this.groups = {};\n        this.possible_groups = {};\n        this.log = logging.getLogger(name + \".parser\");\n\n        this.group_pattern = /([a-z][a-z0-9]*)-([A-Z][a-z0-0\\-]*)/i;\n        this.json_param_pattern = /^\\s*\\[?\\s*{/i;\n        this.named_param_pattern = /^\\s*([a-z][a-z0-9\\-]*)\\s*:(.*)/is;\n        this.token_pattern = /(([\"']).*?(?!\\\\)\\2)|\\s*(\\S+)\\s*/g;\n    }\n\n    _camelCase(str) {\n        return str.replace(/\\-([a-z])/g, (__, p1) => p1.toUpperCase());\n    }\n\n    addAlias(alias, original) {\n        /* Add an alias for a previously added parser argument.\n         *\n         * Useful when you want to support both US and UK english argument\n         * names.\n         */\n        if (this.parameters[original]) {\n            this.parameters[original].alias = alias;\n        } else {\n            throw `Attempted to add an alias \"${alias}\" for a non-existing parser argument \"${original}\".`;\n        }\n    }\n\n    addGroupToSpec(spec) {\n        /* Determine wether an argument being parsed can be grouped and\n         * update its specifications object accordingly.\n         *\n         * Internal method used by addArgument and addJSONArgument\n         */\n        const m = spec.name.match(this.group_pattern);\n        if (m) {\n            const group = m[1];\n            const field = m[2];\n            if (group in this.possible_groups) {\n                const first_spec = this.possible_groups[group];\n                const first_name = first_spec.name.match(this.group_pattern)[2];\n                first_spec.group = group;\n                first_spec.dest = first_name;\n                this.groups[group] = new ArgumentParser();\n                this.groups[group].addArgument(\n                    first_name,\n                    first_spec.value,\n                    first_spec.choices,\n                    first_spec.multiple\n                );\n                delete this.possible_groups[group];\n            }\n            if (group in this.groups) {\n                this.groups[group].addArgument(\n                    field,\n                    spec.value,\n                    spec.choices,\n                    spec.multiple\n                );\n                spec.group = group;\n                spec.dest = field;\n            } else {\n                this.possible_groups[group] = spec;\n                spec.dest = this._camelCase(spec.name);\n            }\n        }\n        return spec;\n    }\n\n    addJSONArgument(name, default_value) {\n        /* Add an argument where the value is provided in JSON format.\n         *\n         * This is a different usecase than specifying all arguments to\n         * the data-pat-... attributes in JSON format, and instead is part\n         * of the normal notation except that a value is in JSON instead of\n         * for example a string.\n         */\n        this.order.push(name);\n        this.parameters[name] = this.addGroupToSpec({\n            name: name,\n            value: default_value,\n            dest: name,\n            group: null,\n            type: \"json\",\n        });\n    }\n\n    addArgument(name, default_value, choices, multiple) {\n        const spec = {\n            name: name,\n            value:\n                multiple && !Array.isArray(default_value)\n                    ? [default_value]\n                    : default_value,\n            multiple: multiple,\n            dest: name,\n            group: null,\n        };\n        if (choices && Array.isArray(choices) && choices.length) {\n            spec.choices = choices;\n            spec.type = this._typeof(choices[0]);\n            for (const choice of choices) {\n                if (this.enum_conflicts.indexOf(choice) !== -1) {\n                    continue;\n                } else if (choice in this.enum_values) {\n                    this.enum_conflicts.push(choice);\n                    delete this.enum_values[choice];\n                } else {\n                    this.enum_values[choice] = name;\n                }\n            }\n        } else if (typeof spec.value === \"string\" && spec.value.slice(0, 1) === \"$\") {\n            spec.type = this.parameters[spec.value.slice(1)].type;\n        } else {\n            // Note that this will get reset by _defaults if default_value is a function.\n            spec.type = this._typeof(multiple ? spec.value[0] : spec.value);\n        }\n        this.order.push(name);\n        this.parameters[name] = this.addGroupToSpec(spec);\n    }\n\n    _typeof(obj) {\n        if (obj === null) {\n            return \"null\";\n        }\n        return typeof obj;\n    }\n\n    _coerce(name, value) {\n        const spec = this.parameters[name];\n        if (typeof value !== spec.type)\n            try {\n                switch (spec.type) {\n                    case \"json\":\n                        value = JSON.parse(value);\n                        break;\n                    case \"boolean\":\n                        if (typeof value === \"string\") {\n                            value = value.toLowerCase();\n                            const num = parseInt(value, 10);\n                            if (!isNaN(num)) value = !!num;\n                            else\n                                value =\n                                    value === \"true\" ||\n                                    value === \"y\" ||\n                                    value === \"yes\" ||\n                                    value === \"y\" ||\n                                    value === \"on\";\n                        } else if (typeof value === \"number\") {\n                            value = !!value;\n                        } else {\n                            throw `Cannot convert value for ${name} to boolean.`;\n                        }\n                        break;\n                    case \"number\":\n                        if (typeof value === \"string\") {\n                            value = parseInt(value, 10);\n                            if (isNaN(value)) {\n                                throw `Cannot convert value for ${name} to number.`;\n                            }\n                        } else if (typeof value === \"boolean\") {\n                            value = value + 0;\n                        } else {\n                            throw `Cannot convert value for ${name} to number.`;\n                        }\n                        break;\n                    case \"string\":\n                        value = value.toString();\n                        break;\n                    case \"null\": // Missing default values\n                    case \"undefined\":\n                        break;\n                    default:\n                        throw `Do not know how to convert value for ${name} of type ${typeof value} to ${\n                            spec.type\n                        }.`;\n                }\n            } catch (e) {\n                this.log.warn(e);\n                return null;\n            }\n\n        if (spec.choices && spec.choices.indexOf(value) === -1) {\n            this.log.warn(`Illegal value for ${name}: ${value}.`);\n            return null;\n        }\n        return value;\n    }\n\n    _set(opts, name, value) {\n        if (!(name in this.parameters)) {\n            this.log.debug(`Ignoring value for unknown argument: ${name}.`);\n            return;\n        }\n        const spec = this.parameters[name];\n        let parts;\n        if (spec.multiple) {\n            if (typeof value === \"string\") {\n                parts = value.split(/,+/);\n            } else {\n                parts = value;\n            }\n            value = [];\n            for (const part of parts) {\n                const v = this._coerce(name, part.trim());\n                if (v !== null) {\n                    value.push(v);\n                }\n            }\n        } else {\n            value = this._coerce(name, value);\n            if (value === null) {\n                return;\n            }\n        }\n        opts[name] = value;\n    }\n\n    _split(text) {\n        const tokens = [];\n        text.replace(this.token_pattern, (match, quoted, __, simple) => {\n            if (quoted) {\n                tokens.push(quoted);\n            } else if (simple) {\n                tokens.push(simple);\n            }\n        });\n        return tokens;\n    }\n\n    _parseExtendedNotation(argstring) {\n        const opts = {};\n        const parts = argstring\n            .replace(/;;/g, \"\\0x1f\")\n            .replace(/&amp;/g, \"&amp\\0x1f\")\n            .split(/;/)\n            .map((el) => el.replace(new RegExp(\"\\0x1f\", \"g\"), \";\"));\n        for (const part of parts) {\n            if (!part) {\n                continue;\n            }\n            const matches = part.match(this.named_param_pattern);\n            if (!matches) {\n                this.log.warn(`Invalid parameter: ${part}: ${argstring}.`);\n                continue;\n            }\n            const name = matches[1];\n            const value = matches[2].trim();\n            const arg = Object.values(this.parameters).filter((it) => it.alias === name);\n\n            const is_alias = arg.length === 1;\n\n            if (is_alias) {\n                this._set(opts, arg[0].name, value);\n            } else if (name in this.parameters) {\n                this._set(opts, name, value);\n            } else if (name in this.groups) {\n                const subopt = this.groups[name]._parseShorthandNotation(value);\n                for (const field in subopt) {\n                    this._set(opts, name + \"-\" + field, subopt[field]);\n                }\n            } else {\n                this.log.warn(`Unknown named parameter: ${matches[1]}.`);\n                continue;\n            }\n        }\n        return opts;\n    }\n\n    _parseShorthandNotation(parameter) {\n        const parts = this._split(parameter);\n        const opts = {};\n        let i = 0;\n\n        while (parts.length) {\n            const part = parts.shift().trim();\n            let sense;\n            let flag;\n            let positional = true;\n            if (part.slice(0, 3) === \"no-\") {\n                sense = false;\n                flag = part.slice(3);\n            } else {\n                sense = true;\n                flag = part;\n            }\n            if (flag in this.parameters && this.parameters[flag].type === \"boolean\") {\n                positional = false;\n                this._set(opts, flag, sense);\n            } else if (flag in this.enum_values) {\n                positional = false;\n                this._set(opts, this.enum_values[flag], flag);\n            } else if (positional) this._set(opts, this.order[i], part);\n            else {\n                parts.unshift(part);\n                break;\n            }\n            i++;\n            if (i >= this.order.length) {\n                break;\n            }\n        }\n        if (parts.length) this.log.warn(`Ignore extra arguments: ${parts.join(\" \")}.`);\n        return opts;\n    }\n\n    _parse(parameter) {\n        if (!parameter) {\n            return {};\n        }\n        if (parameter.match(this.json_param_pattern)) {\n            try {\n                return JSON.parse(parameter);\n            } catch {\n                this.log.warn(`Invalid JSON argument found: ${parameter}.`);\n            }\n        }\n        if (parameter.match(this.named_param_pattern)) {\n            return this._parseExtendedNotation(parameter);\n        }\n        const sep = parameter.indexOf(\";\");\n        if (sep === -1) {\n            return this._parseShorthandNotation(parameter);\n        }\n        const opts = this._parseShorthandNotation(parameter.slice(0, sep));\n        const extended = this._parseExtendedNotation(parameter.slice(sep + 1));\n        for (const name in extended) {\n            opts[name] = extended[name];\n        }\n        return opts;\n    }\n\n    _defaults($el) {\n        const result = {};\n        for (const name in this.parameters) {\n            if (typeof this.parameters[name].value === \"function\") {\n                try {\n                    result[name] = this.parameters[name].value($el, name);\n                    this.parameters[name].type = typeof result[name];\n                } catch {\n                    this.log.error(`Default function for ${name} failed.`);\n                }\n            } else {\n                result[name] = this.parameters[name].value;\n            }\n        }\n        return result;\n    }\n\n    _cleanupOptions(options, group_options = true) {\n        // Resolve references\n        for (const name of Object.keys(options)) {\n            const spec = this.parameters[name];\n            if (spec === undefined) {\n                continue;\n            }\n\n            if (\n                options[name] === spec.value &&\n                typeof spec.value === \"string\" &&\n                spec.value.slice(0, 1) === \"$\"\n            ) {\n                options[name] = options[spec.value.slice(1)];\n            }\n        }\n        if (group_options) {\n            // Move options into groups and do renames\n            for (const name of Object.keys(options)) {\n                const spec = this.parameters[name];\n                let target;\n                if (spec === undefined) {\n                    continue;\n                }\n\n                if (spec.group) {\n                    if (typeof options[spec.group] !== \"object\") {\n                        options[spec.group] = {};\n                    }\n                    target = options[spec.group];\n                } else {\n                    target = options;\n                }\n\n                if (spec.dest !== name) {\n                    target[spec.dest] = options[name];\n                    delete options[name];\n                }\n            }\n        }\n        return options;\n    }\n\n    parse($el, options, multiple, inherit = true, group_options = true) {\n        if (!$el.jquery) {\n            $el = $($el);\n        }\n        if (typeof options === \"boolean\" && multiple === undefined) {\n            // Fix argument order: ``multiple`` passed instead of ``options``.\n            multiple = options;\n            options = {};\n        }\n        const stack = inherit ? [[this._defaults($el)]] : [[{}]];\n        let $possible_config_providers;\n        let final_length = 1;\n        /*\n         * XXX this is a workaround for:\n         * - https://github.com/Patternslib/Patterns/issues/393\n         *\n         * Prevents the parser to pollute the pat-modal configuration\n         * with data-pat-inject elements define in a `.pat-modal` parent element.\n         *\n         *  Probably this function should be completely revisited, see:\n         * - https://github.com/Patternslib/Patterns/issues/627\n         *\n         */\n        if (\n            !inherit ||\n            ($el.hasClass(\"pat-modal\") && this.attribute === \"data-pat-inject\")\n        ) {\n            $possible_config_providers = $el;\n        } else {\n            $possible_config_providers = $el.parents(`[${this.attribute}]`).addBack();\n        }\n\n        for (const provider of $possible_config_providers) {\n            let frame;\n            const data = ($(provider).attr(this.attribute) || \"\").trim();\n            if (!data) {\n                continue;\n            }\n            const _parse = this._parse.bind(this);\n            if (data.match(/&&/)) {\n                frame = data.split(/\\s*&&\\s*/).map(_parse);\n            } else {\n                frame = _parse(data);\n            }\n            if (!Array.isArray(frame)) {\n                frame = [frame];\n            }\n            final_length = Math.max(frame.length, final_length);\n            stack.push(frame);\n        }\n\n        if (typeof options === \"object\") {\n            if (Array.isArray(options)) {\n                stack.push(options);\n                final_length = Math.max(options.length, final_length);\n            } else {\n                stack.push([options]);\n            }\n        }\n        if (!multiple) {\n            final_length = 1;\n        }\n        const results = utils\n            .removeDuplicateObjects(utils.mergeStack(stack, final_length))\n            .map((current_value) => this._cleanupOptions(current_value, group_options));\n        return multiple ? results : results[0];\n    }\n}\n\n// BBB\nArgumentParser.prototype.add_argument = ArgumentParser.prototype.addArgument;\n\nexport default ArgumentParser;\n","/**\n * Get a universally unique id (uuid).\n *\n * @returns {String} - The uuid.\n */\nconst create_uuid = () => {\n    let uuid;\n    if (window.crypto.randomUUID) {\n        // Create a real UUID\n        // window.crypto.randomUUID does only exist in browsers with secure\n        // context.\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID\n        uuid = window.crypto.randomUUID();\n    } else {\n        // Create a sufficiently unique ID\n        const array = new Uint32Array(4);\n        uuid = window.crypto.getRandomValues(array).join(\"\");\n    }\n    return uuid;\n};\nexport default create_uuid;\n","import utils from \"./utils\";\n\n// Event related methods and event factories\n\n// Event listener registration for easy-to-remove event listeners.\n// once Safari supports the ``signal`` option for addEventListener we can abort\n// event handlers by calling AbortController.abort().\nexport const event_listener_map = new Map();\n\n/**\n * Add an event listener to a DOM element under a unique id.\n * If a event is registered under the same id for the same element, the old handler is removed first.\n *\n * @param {DOM Node} el - The element to register the event for.\n * @param {string} event_type - The event type to listen for.\n * @param {string} id - A unique id under which the event is registered.\n * @param {function} cb - The event handler / callback function.\n * @param {Object} opts - Options for the addEventListener API.\n *\n */\nconst add_event_listener = (el, event_type, id, cb, opts = {}) => {\n    if (!el?.addEventListener) {\n        return; // nothing to do.\n    }\n    remove_event_listener(el, id); // do not register one listener twice.\n\n    // Create event_listener_map entry if not existent.\n    if (!event_listener_map.has(el)) {\n        event_listener_map.set(el, new Map());\n    }\n    let _cb = cb;\n    if (opts?.once === true) {\n        // For `once` events, also remove the entry from the event_listener_map.\n        _cb = (e) => {\n            event_listener_map.get(el)?.delete(id);\n            cb(e);\n        };\n    }\n    // Only `capture` option is necessary for `removeEventListener`.\n    event_listener_map\n        .get(el)\n        .set(id, [event_type, _cb, opts.capture ? opts : undefined]);\n    el.addEventListener(event_type, _cb, opts);\n};\n\n/**\n * Remove an event listener from a DOM element under a unique id.\n *\n * If an element and id are given, the event listeners for the given element matching the id are removed.\n * If an element but no id is given, all event listeners for that element are removed.\n * If an id but no element is given, all event listeners for any element matching the id are removed.\n * If no element and no id are given, all event listeners are removed.\n *\n * The id can be a wildcard string, e.g. `test-*-event`, which would match any\n * event which starts with \"test-\" and ends with \"-event\". The wildcard \"*\" can\n * be anywhere in the string and also be used multiple times. If no wildcard is\n * present the search string is used for an exact match.\n *\n * @param {DOM Node} [el] - The element to register the event for.\n * @param {string} [id] - A unique id under which the event is registered.\n *                        Can be a wildcard string.\n *\n */\nconst remove_event_listener = (el, id) => {\n    const els = el ? [el] : event_listener_map.keys();\n    for (const el of els) {\n        if (!el?.removeEventListener) {\n            return; // nothing to do.\n        }\n        const el_events = event_listener_map.get(el);\n        if (!el_events) {\n            return;\n        }\n        let entries;\n        if (id) {\n            // remove event listener with matching id\n            entries = [...el_events.entries()].filter((entry) =>\n                utils.regexp_from_wildcard(id).test(entry[0])\n            );\n        } else {\n            // remove all event listeners of element\n            entries = el_events.entries();\n        }\n        for (const entry of entries || []) {\n            // Remove event listener\n            el.removeEventListener(entry[1][0], entry[1][1], entry[1][2]);\n            // Delete entry from event_listener_map\n            event_listener_map.get(el).delete(entry[0]);\n            // Delete element from event_listener_map if no more events are registered.\n            if (!event_listener_map.get(el).size) {\n                event_listener_map.delete(el);\n            }\n        }\n    }\n};\n\n/**\n * Await an event to be thrown.\n *\n * Usage:\n *     await events.await_event(button, \"click\");\n *\n * @param {DOM Node} el - The element to listen on.\n * @param {String} event_name - The event name to listen for.\n *\n * @returns {Promise} - Returns a Promise which can be used for ``await`` and which will be resolved when the event is throwm.\n *\n */\nconst await_event = (el, event_name) => {\n    // See: https://stackoverflow.com/a/44746691/1337474\n    return new Promise((resolve) =>\n        el.addEventListener(event_name, resolve, { once: true })\n    );\n};\n\n/**\n * Await pattern init.\n *\n * Usage:\n *     await events.await_pattern_init(PATTERN);\n *\n * @param {Pattern instance} pattern - The pattern instance.\n *\n * @returns {Promise} - Returns a Promise which can be used for ``await`` and which will be resolved when the event is throwm.\n *\n */\nconst await_pattern_init = (pattern) => {\n    // See: https://stackoverflow.com/a/44746691/1337474\n    return new Promise((resolve, reject) => {\n        // Case initialized\n        pattern.one(\"init\", (e) => {\n            if (e.target !== pattern.el) {\n                // Don't handle bubbling init events from child elements. We\n                // want to check on init events coming directly from this\n                // Pattern's element.\n                return;\n            }\n            // Resolve promise and unregister the not-init event handler.\n            remove_event_listener(\n                pattern.el,\n                `basepattern-one--not-init.${pattern.name}.patterns`\n            );\n            resolve();\n        });\n\n        // Case not initialized\n        pattern.one(\"not-init\", (e) => {\n            if (e.target !== pattern.el) {\n                // Don't handle bubbling not-init events from child elements.\n                // We want to check on not-init events coming directly from\n                // this Pattern's element.\n                return;\n            }\n            // Reject promise and unregister the init event handler.\n            remove_event_listener(\n                pattern.el,\n                `basepattern-one--init.${pattern.name}.patterns`\n            );\n            reject();\n        });\n    }).catch(() => {\n        throw new Error(`Pattern \"${pattern.name}\" not initialized.`);\n    });\n};\n\n/**\n * Event factories\n */\n\n/** Generic event factory.\n *\n * A event factory for a bubbling and cancelable generic event.\n *\n * @param {string} name - The event name.\n * @returns {Event} - Returns a blur event.\n */\nconst generic_event = (name) => {\n    return new Event(name, {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\n\n/** Patternslib specifc event factories\n */\n\nclass UpdateEvent extends CustomEvent {\n    constructor(options) {\n        super(\"pat-update\", {\n            bubbles: true,\n            cancelable: true,\n            detail: options\n        });\n    }\n}\n\nconst update_event = (options) => {\n    return new UpdateEvent(options);\n}\n\n\n/** Web API event factories\n */\n\nconst blur_event = () => {\n    return new Event(\"blur\", {\n        bubbles: false,\n        cancelable: false,\n    });\n};\n\nconst click_event = () => {\n    return new Event(\"click\", {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\nconst change_event = () => {\n    return new Event(\"change\", {\n        bubbles: true,\n        cancelable: false,\n    });\n};\n\nconst focus_event = () => {\n    return new Event(\"focus\", {\n        bubbles: false,\n        cancelable: false,\n    });\n};\n\nconst input_event = () => {\n    return new Event(\"input\", {\n        bubbles: true,\n        cancelable: false,\n    });\n};\n\nconst mousedown_event = () => {\n    return new Event(\"mousedown\", {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\nconst mouseup_event = () => {\n    return new Event(\"mouseup\", {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\nconst scroll_event = () => {\n    return new Event(\"scroll\", {\n        bubbles: true,\n        cancelable: false,\n    });\n};\n\nconst submit_event = ({ submitter } = { submitter: undefined }) => {\n    const event = new Event(\"submit\", {\n        bubbles: true,\n        cancelable: true,\n    });\n    event.submitter = submitter; // undefined or the submitting element\n    return event;\n};\n\nconst dragstart_event = () => {\n    return new Event(\"dragstart\", {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\nconst dragend_event = () => {\n    return new Event(\"dragend\", {\n        bubbles: true,\n        cancelable: true,\n    });\n};\n\nexport default {\n    add_event_listener: add_event_listener,\n    remove_event_listener: remove_event_listener,\n    await_event: await_event,\n    await_pattern_init: await_pattern_init,\n    generic_event: generic_event,\n    update_event: update_event,\n    blur_event: blur_event,\n    click_event: click_event,\n    change_event: change_event,\n    focus_event: focus_event,\n    input_event: input_event,\n    mousedown_event: mousedown_event,\n    mouseup_event: mouseup_event,\n    scroll_event: scroll_event,\n    submit_event: submit_event,\n    dragstart_event: dragstart_event,\n    dragend_event: dragend_event,\n};\n","import $ from \"jquery\";\nimport dom from \"./dom\";\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24; // Milliseconds per day.\n\n$.fn.safeClone = function () {\n    var $clone = this.clone();\n    return $clone;\n};\n\n// Production steps of ECMA-262, Edition 5, 15.4.4.18\n// Reference: http://es5.github.io/#x15.4.4.18\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function (callback, thisArg) {\n        var T, k;\n        if (this === null) {\n            throw new TypeError(\" this is null or not defined\");\n        }\n        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + \" is not a function\");\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as the this value and\n                // argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\nvar singleBoundJQueryPlugin = function (pattern, method, options) {\n    /* This is a jQuery plugin for patterns which are invoked ONCE FOR EACH\n     * matched element in the DOM.\n     *\n     * This is how the Mockup-type patterns behave. They are constructor\n     * functions which need to be invoked once per jQuery-wrapped DOM node\n     * for all DOM nodes on which the pattern applies.\n     */\n    var $this = this;\n    $this.each(function () {\n        var pat,\n            $el = $(this);\n        pat = pattern.init($el, options);\n        if (method) {\n            if (pat[method] === undefined) {\n                $.error(\n                    \"Method \" + method + \" does not exist on jQuery.\" + pattern.name\n                );\n                return false;\n            }\n            if (method.charAt(0) === \"_\") {\n                $.error(\"Method \" + method + \" is private on jQuery.\" + pattern.name);\n                return false;\n            }\n            pat[method].apply(pat, [options]);\n        }\n    });\n    return $this;\n};\n\nvar pluralBoundJQueryPlugin = function (pattern, method, options) {\n    /* This is a jQuery plugin for patterns which are invoked ONCE FOR ALL\n     * matched elements in the DOM.\n     *\n     * This is how the vanilla Patternslib-type patterns behave. They are\n     * simple objects with an init method and this method gets called once\n     * with a list of jQuery-wrapped DOM nodes on which the pattern\n     * applies.\n     */\n    var $this = this;\n    if (method) {\n        if (pattern[method]) {\n            return pattern[method].apply($this, [$this].concat([options]));\n        } else {\n            $.error(\"Method \" + method + \" does not exist on jQuery.\" + pattern.name);\n        }\n    } else {\n        pattern.init.apply($this, [$this].concat([options]));\n    }\n    return $this;\n};\n\nvar jqueryPlugin = function (pattern) {\n    return function (method, options) {\n        var $this = this;\n        if ($this.length === 0) {\n            return $this;\n        }\n        if (typeof method === \"object\") {\n            options = method;\n            method = undefined;\n        }\n        if (typeof pattern === \"function\") {\n            return singleBoundJQueryPlugin.call(this, pattern, method, options);\n        } else {\n            return pluralBoundJQueryPlugin.call(this, pattern, method, options);\n        }\n    };\n};\n\n// Is a given variable an object?\nfunction isObject(obj) {\n    var type = typeof obj;\n    return type === \"function\" || (type === \"object\" && !!obj);\n}\n\n// Extend a given object with all the properties in passed-in object(s).\nfunction extend(obj) {\n    if (!isObject(obj)) return obj;\n    var source, prop;\n    for (var i = 1, length = arguments.length; i < length; i++) {\n        source = arguments[i];\n        for (prop in source) {\n            if (hasOwnProperty.call(source, prop)) {\n                obj[prop] = source[prop];\n            }\n        }\n    }\n    return obj;\n}\n// END: Taken from Underscore.js until here.\n\nfunction findLabel(input) {\n    var $label;\n    for (\n        var label = input.parentNode;\n        label && label.nodeType !== 11;\n        label = label.parentNode\n    ) {\n        if (label.tagName === \"LABEL\") {\n            return label;\n        }\n    }\n    if (input.id) {\n        $label = $('label[for=\"' + input.id + '\"]');\n    }\n    if ($label && $label.length === 0 && input.form) {\n        $label = $('label[for=\"' + input.name + '\"]', input.form);\n    }\n    if ($label && $label.length) {\n        return $label[0];\n    } else {\n        return null;\n    }\n}\n\n// Taken from http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nfunction escapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\n\n/**\n * Create a RegExp object of a wildcard search string.\n *\n * @param {string} wildcard: A search string which can contain wildcards \"*\".\n *                           The wildcard \"*\" can be anywhere in the string and\n *                           can also be used multiple times. If no wildcard is\n *                           present the search string is used for an exact match.\n\n * @returns {RegExp}: A RegExp object which can be used to match strings.\n */\nfunction regexp_from_wildcard(wildcard) {\n    let regexp = wildcard.replace(/[\\-\\[\\]{}()+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n    regexp = regexp.replace(/[*]/g, \".*\");\n    regexp = new RegExp(`^${regexp}$`);\n    return regexp;\n}\n\n/**\n * Remove classes from a list of targets if they match a specific pattern.\n *\n * @param {Node, NodeList} targets: Dom Node or NodeList where the classes should be removed.\n * @param {string} classes: String matching classes to be removed.\n *                          You can add a \"*\" as wildcard to search for classes to be removed.\n *                          E.g. \"icon-*-alert\" to remove any of \"icon-1-alert icon-2-alert\".\n *\n * @returns {undefined}: This method directly operates on the targets.\n */\nfunction removeWildcardClass(targets, classes) {\n    targets = utils.ensureArray(targets);\n\n    if (classes.indexOf(\"*\") === -1) {\n        for (const target of targets) {\n            target.classList.remove(classes);\n        }\n    } else {\n        const matcher = regexp_from_wildcard(classes);\n        for (const target of targets) {\n            const class_list = (target.getAttribute(\"class\") || \"\").split(/\\s+/);\n            if (!class_list.length) {\n                continue;\n            }\n            const ok = class_list.filter((it) => !matcher.test(it));\n            if (ok.length) {\n                target.setAttribute(\"class\", ok.join(\" \"));\n            } else {\n                target.removeAttribute(\"class\");\n            }\n        }\n    }\n}\n\nfunction hasValue(el) {\n    if (el.tagName === \"INPUT\") {\n        if (el.type === \"checkbox\" || el.type === \"radio\") {\n            return el.checked;\n        }\n        return el.value !== \"\";\n    }\n    if (el.tagName === \"SELECT\") {\n        return el.selectedIndex !== -1;\n    }\n    if (el.tagName === \"TEXTAREA\") {\n        return el.value !== \"\";\n    }\n    return false;\n}\n\nconst hideOrShow = (nodes, visible, options, pattern_name) => {\n    nodes = dom.toNodeArray(nodes);\n\n    const transitions = {\n        none: { hide: \"hide\", show: \"show\" },\n        fade: { hide: \"fadeOut\", show: \"fadeIn\" },\n        slide: { hide: \"slideUp\", show: \"slideDown\" },\n    };\n\n    const duration =\n        options.transition === \"css\" || options.transition === \"none\"\n            ? null\n            : options.effect.duration;\n\n    const on_complete = (el) => {\n        el.classList.remove(\"in-progress\");\n        el.classList.add(visible ? \"visible\" : \"hidden\");\n        $(el).trigger(\"pat-update\", {\n            pattern: pattern_name,\n            action: \"attribute-changed\",\n            dom: el,\n            transition: \"complete\",\n        });\n    };\n\n    for (const el of nodes) {\n        el.classList.remove(\"visible\");\n        el.classList.remove(\"hidden\");\n        el.classList.remove(\"in-progress\");\n\n        if (duration) {\n            const t = transitions[options.transition];\n            el.classList.add(\"in-progress\");\n            $(el).trigger(\"pat-update\", {\n                pattern: pattern_name,\n                action: \"attribute-changed\",\n                dom: el,\n                transition: \"start\",\n            });\n            $(el)[visible ? t.show : t.hide]({\n                duration: duration,\n                easing: options.effect.easing,\n                complete: () => on_complete(el),\n            });\n        } else {\n            if (options.transition !== \"css\") {\n                dom[visible ? \"show\" : \"hide\"](el);\n            }\n            on_complete(el);\n        }\n    }\n};\n\nfunction addURLQueryParameter(fullURL, param, value) {\n    /* Using a positive lookahead (?=\\=) to find the given parameter,\n     * preceded by a ? or &, and followed by a = with a value after\n     * than (using a non-greedy selector) and then followed by\n     * a & or the end of the string.\n     *\n     * Taken from http://stackoverflow.com/questions/7640270/adding-modify-query-string-get-variables-in-a-url-with-javascript\n     */\n    var val = new RegExp(\"(\\\\?|\\\\&)\" + param + \"=.*?(?=(&|$))\"),\n        parts = fullURL.toString().split(\"#\"),\n        url = parts[0],\n        hash = parts[1],\n        qstring = /\\?.+$/,\n        newURL = url;\n    // Check if the parameter exists\n    if (val.test(url)) {\n        // if it does, replace it, using the captured group\n        // to determine & or ? at the beginning\n        newURL = url.replace(val, \"$1\" + param + \"=\" + value);\n    } else if (qstring.test(url)) {\n        // otherwise, if there is a query string at all\n        // add the param to the end of it\n        newURL = url + \"&\" + param + \"=\" + value;\n    } else {\n        // if there's no query string, add one\n        newURL = url + \"?\" + param + \"=\" + value;\n    }\n    if (hash) {\n        newURL += \"#\" + hash;\n    }\n    return newURL;\n}\n\nfunction removeDuplicateObjects(objs) {\n    /* Given an array of objects, remove any duplicate objects which might\n     * be present.\n     */\n    const comparator = function (k, v) {\n        return this[k] === v;\n    };\n\n    return objs.reduce(function (list, next_obj) {\n        let is_duplicate = false;\n        for (const obj of list) {\n            is_duplicate =\n                Object.keys(obj).length === Object.keys(next_obj).length &&\n                Object.entries(obj).filter(\n                    (it) => !comparator.bind(next_obj)(it[0], it[1])\n                ).length === 0;\n        }\n        if (!is_duplicate) {\n            list.push(next_obj);\n        }\n        return list;\n    }, []);\n}\n\nfunction mergeStack(stack, length) {\n    /* Given a list of lists of objects (which for brevity we call a stack),\n     * return a list of objects where each object is the merge of all the\n     * corresponding original objects at that particular index.\n     *\n     * If a certain sub-list doesn't have an object at that particular\n     * index, the last object in that list is merged.\n     */\n    const results = [];\n    for (let i = 0; i < length; i++) {\n        results.push({});\n    }\n    for (const frame of stack) {\n        const frame_length = frame.length - 1;\n        for (let x = 0; x < length; x++) {\n            results[x] = $.extend(\n                results[x] || {},\n                frame[x > frame_length ? frame_length : x]\n            );\n        }\n    }\n    return results;\n}\n\nfunction isElementInViewport(el, partial = false, offset = 0) {\n    /* returns true if element is visible to the user ie. is in the viewport.\n     * Setting partial parameter to true, will only check if a part of the element is visible\n     * in the viewport, specifically that some part of that element is touching the top part\n     * of the viewport. This only applies to the vertical direction, ie. doesnt check partial\n     * visibility for horizontal scrolling\n     * some code taken from:\n     * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport/7557433#7557433\n     */\n    if (el instanceof $) {\n        el = el[0];\n    }\n\n    const rec = el.getBoundingClientRect();\n    const rec_values = [rec.top, rec.bottom, rec.left, rec.right];\n\n    if (rec_values.every((val) => val === 0)) {\n        // if every property of rec is 0, the element is invisible;\n        return false;\n    } else if (partial) {\n        // when using getBoundingClientRect() (in the vertical case)\n        // negative means above top of viewport, positive means below top of viewport\n        // therefore for part of the element to be touching or crossing the top of the viewport\n        // rec.top must <= 0 and rec.bottom must >= 0\n        // an optional tolerance offset can be added for when the desired element is not exactly\n        // toucing the top of the viewport but needs to be considered as touching.\n        return (\n            rec.top <= 0 + offset && rec.bottom >= 0 + offset\n            //(rec.top >= 0+offset && rec.top <= window.innerHeight) // this checks if the element\n            // touches bottom part of viewport\n            // XXX do we want to include a check for the padding of an element?\n            // using window.getComputedStyle(target).paddingTop\n        );\n    } else {\n        // this will return true if the entire element is completely in the viewport\n        return (\n            rec.top >= 0 &&\n            rec.left >= 0 &&\n            rec.bottom <=\n                (window.innerHeight || document.documentElement.clientHeight) &&\n            rec.right <= (window.innerWidth || document.documentElement.clientWidth)\n        );\n    }\n}\n\n/* parseTime - Parse a duration from a string and return the parsed time in milliseconds.\n *\n * @param {String} time - A duration/time string like ``1ms``, ``1s`` or ``1m``.\n *\n * @returns {Number} - A integer which represents the parsed time in milliseconds.\n */\nfunction parseTime(time) {\n    var m = /^(\\d+(?:\\.\\d+)?)\\s*(\\w*)/.exec(time);\n    if (!m) {\n        throw new Error(\"Invalid time\");\n    }\n    var amount = parseFloat(m[1]);\n    switch (m[2]) {\n        case \"s\":\n            return Math.round(amount * 1000);\n        case \"m\":\n            return Math.round(amount * 1000 * 60);\n        case \"ms\":\n        default:\n            return Math.round(amount);\n    }\n}\n\n/*\n\n * parseLength - Parse a length from a string and return the parsed length in\n * pixels.\n\n * @param {String} length - A length string like `1px` or `25%`. Lengths without a unit are treated as pixels.\n * @param {Number} reference_length - The reference length to use for percentage lengths.\n *\n * @returns {Number} - A integer which represents the parsed length in pixels.\n *\n * @throws {Error} - If the length string is invalid.\n *\n * @example\n * parseLength(\"1px\"); // 1\n * parseLength(\"10%\", 100); // 10\n *\n */\nfunction parseLength(length, reference_length = null) {\n    const m = /^(\\d+(?:\\.\\d+)?)\\s*(\\%?\\w*)/.exec(length);\n    if (!m) {\n        throw new Error(\"Invalid length\");\n    }\n    const amount = parseFloat(m[1]);\n    switch (m[2]) {\n        case \"px\":\n            return Math.round(amount);\n        case \"%\":\n            if (!reference_length) {\n                return 0;\n            }\n            return (reference_length / 100) * Math.round(amount);\n        case \"vw\":\n            return Math.round((amount * window.innerWidth) / 100);\n        case \"vh\":\n            return Math.round((amount * window.innerHeight) / 100);\n        case \"vmin\":\n            return Math.round(\n                (amount * Math.min(window.innerWidth, window.innerHeight)) / 100\n            );\n        case \"vmax\":\n            return Math.round(\n                (amount * Math.max(window.innerWidth, window.innerHeight)) / 100\n            );\n        default:\n            return Math.round(amount);\n    }\n}\n\n// Return a jQuery object with elements related to an input element.\nfunction findRelatives(el) {\n    var $el = $(el),\n        $relatives = $(el),\n        $label = $();\n\n    $relatives = $relatives.add($el.closest(\"label\"));\n    $relatives = $relatives.add($el.closest(\"fieldset\"));\n\n    if (el.id) $label = $(\"label[for='\" + el.id + \"']\");\n    if (!$label.length) {\n        var $form = $el.closest(\"form\");\n        if (!$form.length) $form = $(document.body);\n        $label = $form.find(\"label[for='\" + el.name + \"']\");\n    }\n    $relatives = $relatives.add($label);\n    return $relatives;\n}\n\nfunction get_bounds(el) {\n    // Return bounds of an element with it's values rounded and converted to ints.\n    const bounds = el.getBoundingClientRect();\n    return {\n        x: parseInt(Math.round(bounds.x), 10) || 0,\n        y: parseInt(Math.round(bounds.y), 10) || 0,\n        top: parseInt(Math.round(bounds.top), 10) || 0,\n        bottom: parseInt(Math.round(bounds.bottom), 10) || 0,\n        left: parseInt(Math.round(bounds.left), 10) || 0,\n        right: parseInt(Math.round(bounds.right), 10) || 0,\n        width: parseInt(Math.round(bounds.width), 10) || 0,\n        height: parseInt(Math.round(bounds.height), 10) || 0,\n    };\n}\n\nfunction checkInputSupport(type, invalid_value) {\n    /* Check input type support.\n     *  See: https://stackoverflow.com/a/10199306/1337474\n     */\n    let support = false;\n    const input = document.createElement(\"input\");\n    input.setAttribute(\"type\", type);\n    support = input.type == type;\n\n    if (invalid_value !== undefined) {\n        // Check for input type UI support\n        input.setAttribute(\"value\", invalid_value);\n        support = input.value !== invalid_value;\n    }\n    return support;\n}\n\nconst checkCSSFeature = (attribute, value, tag = \"div\") => {\n    /* Check for browser support of specific CSS feature.\n     */\n    tag = document.createElement(tag);\n    let supported = tag.style[attribute] !== undefined;\n    if (supported && value !== undefined) {\n        tag.style[attribute] = value;\n        supported = tag.style[attribute] === value;\n    }\n    return supported;\n};\n\nconst animation_frame = () => {\n    // Return promise to await next repaint cycle\n    // Use it in your async function like so: ``await utils.animation_frame()``\n    // From: http://www.albertlobo.com/fractals/async-await-requestanimationframe-buddhabrot\n    return new Promise(window.requestAnimationFrame);\n};\n\nconst timeout = (ms) => {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds.\n * From: https://underscorejs.org/#debounce\n *\n * @param {Function} func - The function to debounce.\n * @param {Number} ms - The time in milliseconds to debounce.\n * @param {Object} timer - A module-global timer as an object.\n * @param {Boolean} [postpone=true] - If true, the function will only be called\n * at the end, after it stops being called for N milliseconds. If false, the\n * function will be called no more than each [ms] milliseconds, ensuring that\n * the function isn't postponed for for too long.\n *\n * @returns {Function} - The debounced function.\n */\nconst debounce = (func, ms, timer = { timer: null }, postpone = true) => {\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds.\n    // From: https://underscorejs.org/#debounce\n    //\n    // Make sure to initialize ``debounce`` only once per to-be-debounced\n    // function to not reinitialize the timer each time and debounce not being\n    // able to cancel previouse runs.\n    //\n    // Pass a module-global timer as an object ``{ timer: null }`` if you want\n    // to also cancel debounced functions from other pattern-invocations.\n    timer.last_run = 0;\n    return function () {\n        const args = arguments;\n        if (!postpone && timer.timer && Date.now() - timer.last_run <= ms) {\n            return;\n        }\n        clearTimeout(timer.timer);\n        timer.last_run = Date.now();\n        timer.timer = setTimeout(() => {\n            func.apply(this, args);\n        }, ms);\n    };\n};\n\n// TODO: Remove in next major release.\nconst isIE = () => {\n    // See: https://stackoverflow.com/a/9851769/1337474\n    // Internet Explorer 6-11\n    // eslint-disable-next-line no-constant-binary-expression\n    return /*@cc_on!@*/false || !!document.documentMode;\n};\n\nconst jqToNode = (el) => {\n    // Return a DOM node if a jQuery node was passed.\n    if (el.jquery) {\n        el = el[0];\n    }\n    return el;\n};\n\n/**\n * Always return an iterable object.\n *\n * @param {any} it: The object which needs to be wrapped in an array or returned as is if it is iterable.\n * @param {boolean} force_array: If the object is iterable but not an Array, convert it to an array (e.g. For jQuery items or NodeList objects).\n *\n * @returns {Array}: Returns the object wrapped in an Array, expanded to an Array or as-is if it is already iterable.\n */\nconst ensureArray = (it, force_array) => {\n    // Ensure to return always an array\n    const array_like = !!(\n        NodeList.prototype.isPrototypeOf(it) || // eslint-disable-line no-prototype-builtins\n        Array.isArray(it) ||\n        it.jquery\n    );\n    return array_like ? (force_array ? [...it] : it) : [it];\n};\n\nconst localized_isodate = (date) => {\n    // Return a iso date (date only) in the current timezone instead of a\n    // UTC ISO 8601 date+time component which toISOString returns.\n\n    const day = date.getDate().toString().padStart(2, \"0\");\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n    const year = date.getFullYear().toString();\n\n    return `${year}-${month}-${day}`;\n};\n\n/**\n * Replace HTML reserved characters with html entities to add HTML for user\n * editing to e.g. a textarea or a contenteditable.\n *\n * See:\n *  https://stackoverflow.com/a/22706073/1337474\n *  https://developer.mozilla.org/en-US/docs/Glossary/Entity#reserved_characters\n *\n * @param {string} html - The HTML string to encode.\n *\n * @returns {string} - Returns the escaped html string:\n *                     ``&`` will be replaced with ``&amp;``.\n *                     ``<`` will be repalced with ``&lt;``,\n *                     ``>`` will be replaced with ``&gt;``,\n *                     ``\"`` will be replaced with ``&quot;``.\n */\nconst escape_html = (html) => {\n    if (!html) {\n        return \"\";\n    }\n    const el = document.createElement(\"div\");\n    el.appendChild(document.createTextNode(html));\n    // Return escaped html and also replace quotes.\n    return el.innerHTML.replace(/\"/g, \"&quot;\");\n};\n\n/**\n * Return unescaped, raw HTML from an escaped HTML  string.\n *\n * See:\n *  https://stackoverflow.com/a/34064434/1337474\n *  https://developer.mozilla.org/en-US/docs/Glossary/Entity#reserved_characters\n *\n * @param {string} escaped_html - The HTML string to decode.\n *\n * @returns {string} - Returns the escaped html string:\n *                     ``&amp;`` will be replaced with ``&``,\n *                     ``&lt;`` will be repalced with ``<``,\n *                     ``&gt;`` will be replaced with ``>``,\n *                     ``&quot;`` will be replaced with ``\"``.\n */\nconst unescape_html = (escaped_html) => {\n    if (!escaped_html) {\n        return \"\";\n    }\n    const doc = new DOMParser().parseFromString(escaped_html, \"text/html\");\n    // Return unescaped html and also unescape quote named entities.\n    return doc.documentElement.textContent.replace(/&quot;/g, '\"');\n};\n\n/**\n * Return true, if the given value is a valid ISO 8601 date/time string with or without an optional time component.\n *\n * @param {String} value - The date/time value to be checked.\n * @param {Boolean} [optional_time=false] - True, if time component is optional.\n * @return {Boolean} - True, if the given value is a valid Date string. False if not.\n */\nconst is_iso_date_time = (value, optional_time = false) => {\n    const re_date_time = optional_time\n        ? /^\\d{4}-[01]\\d-[0-3]\\d(T[0-2]\\d:[0-5]\\d)?$/\n        : /^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d$/;\n    return re_date_time.test(value);\n};\n\n/**\n * Return true, if the given value is a valid ISO 8601 date string and without a time component.\n *\n * @param {String} value - The date value to be checked.\n * @return {Boolean} - True, if the given value is a valid ISO 8601 date string without a time component. False if not.\n */\nconst is_iso_date = (value) => {\n    const re_date_time = /^\\d{4}-[01]\\d-[0-3]\\d$/;\n    return re_date_time.test(value);\n};\n\n/**\n * Return the number of days between two dates.\n * Based on: https://stackoverflow.com/a/15289883/1337474\n *\n * @param {Date} date_1 - First date to compare. We will substract date_2 from date_1.\n * @param {Date} date_2 - Second date to compare.\n * @return {Number} - The number of days between the two dates.\n */\nconst date_diff = (date_1, date_2) => {\n    // Discard the time and time-zone information.\n    const utc_1 = Date.UTC(date_1.getFullYear(), date_1.getMonth(), date_1.getDate());\n    const utc_2 = Date.UTC(date_2.getFullYear(), date_2.getMonth(), date_2.getDate());\n\n    return Math.floor((utc_1 - utc_2) / _MS_PER_DAY);\n};\n\n/**\n * Build intersection observer threshold list.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#building_the_array_of_threshold_ratios\n *\n * @param {Number} num_steps - The number of steps to use.\n *\n * @returns {Array} - Returns the threshold list.\n */\nconst threshold_list = (num_steps = 0) => {\n    let thresholds = [];\n\n    for (let i = 1.0; i <= num_steps; i++) {\n        thresholds.push(i / num_steps);\n    }\n    thresholds.push(0);\n    return thresholds.sort();\n};\n\n/**\n * is_option_truthy - Check if an Pattern option is set.\n *\n * An option is set if it is not one of:\n * - undefined\n * - null\n * - \"none\"\n * - \"\"\n *\n * @param {String} option - The option to check.\n *\n * @returns {Boolean} - Returns true if the option is set, false otherwise.\n *\n * @example\n *\n * is_option_truthy() // false\n * is_option_truthy(undefined) // false\n * is_option_truthy(null) // false\n * is_option_truthy(\"\") // false\n * is_option_truthy(\"none\") // false\n * is_option_truthy(\"false\") // false\n * is_option_truthy(\"foo\") // true\n * is_option_truthy(true) // true\n * is_option_truthy(0) // true\n *\n */\nconst is_option_truthy = (option) => {\n    return ![undefined, null, \"none\", false, \"false\", \"\"].includes(option);\n};\n\nvar utils = {\n    jqueryPlugin: jqueryPlugin,\n    escapeRegExp: escapeRegExp,\n    isObject: isObject,\n    extend: extend,\n    findLabel: findLabel,\n    regexp_from_wildcard: regexp_from_wildcard,\n    removeWildcardClass: removeWildcardClass,\n    hideOrShow: hideOrShow,\n    addURLQueryParameter: addURLQueryParameter,\n    removeDuplicateObjects: removeDuplicateObjects,\n    mergeStack: mergeStack,\n    isElementInViewport: isElementInViewport,\n    hasValue: hasValue,\n    parseTime: parseTime,\n    parseLength: parseLength,\n    findRelatives: findRelatives,\n    get_bounds: get_bounds,\n    checkInputSupport: checkInputSupport,\n    checkCSSFeature: checkCSSFeature,\n    animation_frame: animation_frame,\n    timeout: timeout,\n    debounce: debounce,\n    isIE: isIE,\n    jqToNode: jqToNode,\n    ensureArray: ensureArray,\n    localized_isodate: localized_isodate,\n    escape_html: escape_html,\n    unescape_html: unescape_html,\n    is_iso_date_time: is_iso_date_time,\n    is_iso_date: is_iso_date,\n    date_diff: date_diff,\n    threshold_list: threshold_list,\n    is_option_truthy: is_option_truthy,\n    //getCSSValue: dom.get_css_value, // BBB: moved to dom. TODO: Remove in upcoming version.\n    elementInViewport: (el) => {\n        // BBB: Remove with next major version.\n        console.warn(\"Deprecated. Use utils.isElementInViewport\");\n        return isElementInViewport(el);\n    },\n};\n\nexport default utils;\n","/* Utilities for DOM traversal or navigation */\nimport events from \"./events\";\nimport logging from \"./logging\";\nimport create_uuid from \"./uuid\";\n\nconst logger = logging.getLogger(\"core dom\");\n\nconst DATA_PREFIX = \"__patternslib__data_prefix__\";\nconst DATA_STYLE_DISPLAY = \"__patternslib__style__display\";\n\nconst INPUT_SELECTOR = \"input, select, textarea, button\";\n\n/**\n * Wait for the document to be ready.\n *\n * @param {Function} fn - The function to call when the document is ready.\n */\nconst document_ready = (fn) => {\n    const event_id = create_uuid();\n\n    const _ready = () => {\n        if (document.readyState !== \"loading\") {\n            // Remove the event listener for this callback.\n            events.remove_event_listener(document, event_id);\n            // call on next available tick\n            setTimeout(fn, 1);\n        }\n    };\n\n    // Listen for the document to be ready and call _ready() when it is.\n    events.add_event_listener(document, \"readystatechange\", event_id, _ready);\n\n    // Also check the ready state immediately in case we missed the event.\n    _ready();\n};\n\n/**\n * Return an array of DOM nodes.\n *\n * @param {Node|NodeList|jQuery} nodes - The DOM node to start the search from.\n *\n * @returns {Array} - An array of DOM nodes.\n */\nconst toNodeArray = (nodes) => {\n    if (nodes.jquery || nodes instanceof NodeList) {\n        // jQuery or document.querySelectorAll\n        nodes = [...nodes];\n    } else if (nodes instanceof Array === false) {\n        nodes = [nodes];\n    }\n    return nodes;\n};\n\n/**\n * Like querySelectorAll but including the element where it starts from.\n * Returns an Array, not a NodeList\n *\n * @param {Node} el - The DOM node to start the search from.\n *\n * @returns {Array} - The DOM nodes found.\n */\nconst querySelectorAllAndMe = (el, selector) => {\n    if (!el || !el.querySelectorAll) {\n        return [];\n    }\n\n    const all = [...el.querySelectorAll(selector)];\n    if (el.matches(selector)) {\n        all.unshift(el); // start element should be first.\n    }\n    return all;\n};\n\n/**\n * Wrap a element with a wrapper element.\n *\n * The element to be wrapped will be moved into the wrapper element and the\n * wrapper element is placed just before the old element was.\n *\n * @param {Node} el - The DOM node to wrap.\n * @param {Node} wrapper - The wrapper element.\n */\nconst wrap = (el, wrapper) => {\n    // See: https://stackoverflow.com/a/13169465/1337474\n    el.parentNode.insertBefore(wrapper, el);\n    wrapper.appendChild(el);\n};\n\n/**\n * Hides the element with ``display: none`` and stores the current display value.\n *\n * @param {Node} el - The DOM node to hide.\n */\nconst hide = (el) => {\n    if (el.style.display === \"none\") {\n        // Nothing to do.\n        return;\n    }\n    if (el.style.display) {\n        el[DATA_STYLE_DISPLAY] = el.style.display;\n    }\n    el.style.display = \"none\";\n};\n\n/**\n * Shows element by removing ``display: none`` and restoring the display value\n * to whatever it was before.\n *\n * @param {Node} el - The DOM node to show.\n */\nconst show = (el) => {\n    const val = el[DATA_STYLE_DISPLAY] || null;\n    el.style.display = val;\n    delete el[DATA_STYLE_DISPLAY];\n};\n\n/**\n * Test, if a element is visible or not.\n *\n * @param {Node} el - The DOM node to test.\n * @returns {Boolean} - True if the element is visible.\n */\nconst is_visible = (el) => {\n    // Check, if element is visible in DOM.\n    // https://stackoverflow.com/a/19808107/1337474\n    return el.offsetWidth > 0 && el.offsetHeight > 0;\n};\n\n/**\n * Test, if a element is a input-type element.\n *\n * This is taken from Sizzle/jQuery at:\n * https://github.com/jquery/sizzle/blob/f2a2412e5e8a5d9edf168ae3b6633ac8e6bd9f2e/src/sizzle.js#L139\n * https://github.com/jquery/sizzle/blob/f2a2412e5e8a5d9edf168ae3b6633ac8e6bd9f2e/src/sizzle.js#L1773\n *\n * @param {Node} el - The DOM node to test.\n * @returns {Boolean} - True if the element is a input-type element.\n */\nconst is_input = (el) => {\n    const re_input = /^(?:input|select|textarea|button)$/i;\n    return re_input.test(el.nodeName);\n};\n\n/**\n * Test, if a element is a button-like input type.\n *\n * @param {Node} el - The DOM node to test.\n * @returns {Boolean} - True if the element is a input-type element.\n */\nconst is_button = (el) => {\n    return el.matches(`\n        button,\n        input[type=image],\n        input[type=button],\n        input[type=reset],\n        input[type=submit]\n    `);\n};\n\n\n\n/**\n * Return all direct parents of ``el`` matching ``selector``.\n * This matches against all parents but not the element itself.\n * The order of elements is from the search starting point up to higher\n * DOM levels.\n *\n * @param {Node} el - The DOM node to start the search from.\n * @param {String} selector - CSS selector to match against.\n * @returns {Array} - List of matching DOM nodes.\n */\nconst find_parents = (el, selector) => {\n    const ret = [];\n    let parent = el;\n    while (parent) {\n        parent = parent.parentNode?.closest?.(selector);\n        if (parent) ret.push(parent);\n    }\n    return ret;\n};\n\n/**\n * Find an element in the whole DOM tree if the selector is an ID selector,\n * otherwise use the given element as the starting point.\n *\n * @param {Node} el - The DOM node to start the search from.\n * @param {String} selector - The CSS selector to search for.\n *\n * @returns {NodeList} - The DOM nodes found.\n *\n */\nconst find_scoped = (el, selector) => {\n    // If the selector starts with an object id do a global search,\n    // otherwise do a local search.\n    return (selector.indexOf(\"#\") === 0 ? document : el).querySelectorAll(selector);\n};\n\n/**\n * Return all HTMLElement parents of el, starting from the direct parent of el.\n * The document itself is excluded because it's not a real DOM node.\n *\n * @param {Node} el - The DOM node to start the search from.\n *\n * @returns {Array} - The DOM nodes found.\n */\nconst get_parents = (el) => {\n    // Return all HTMLElement parents of el, starting from the direct parent of el.\n    const parents = [];\n    let parent = el?.parentNode;\n    while (parent) {\n        parents.push(parent);\n        parent = parent?.parentNode;\n        parent = parent instanceof HTMLElement ? parent : null;\n    }\n    return parents;\n};\n\n/**\n * Return the value of the first attribute found in the list of parents.\n *\n * @param {Node} el - The DOM element to start the acquisition search for the given attribute.\n * @param {string} attribute - Name of the attribute to search for.\n * @param {Boolean} include_empty - Also return empty values.\n * @param {Boolean} include_all - Return a list of attribute values found in all parents.\n *\n * @returns {*} - Returns the value of the searched attribute or a list of all attributes.\n */\nconst acquire_attribute = (\n    el,\n    attribute,\n    include_empty = false,\n    include_all = false\n) => {\n    let _el = el;\n    const ret = []; // array for ``include_all`` mode.\n    while (_el) {\n        const val = _el.getAttribute(attribute);\n        if (val || (include_empty && val === \"\")) {\n            if (!include_all) {\n                return val;\n            }\n            ret.push(val);\n        }\n        _el = _el.parentElement;\n    }\n    if (include_all) {\n        return ret;\n    }\n};\n\n/**\n * Return a DocumentFragment from a given string.\n *\n * @param {String} string - The HTML structure as a string.\n *\n * @returns {DocumentFragment} - The DOM nodes as a DocumentFragment.\n */\nconst create_from_string = (string) => {\n    // See: https://davidwalsh.name/convert-html-stings-dom-nodes\n    return document.createRange().createContextualFragment(string.trim());\n};\n\n/**\n * Return a CSS property value for a given DOM node.\n * For length-values, relative values are converted to pixels.\n * Optionally parse as pixels, if applicable.\n *\n * Note: The element must be attached to the body to make CSS caluclations work.\n *\n * @param {Node} el - DOM node.\n * @param {String} property - CSS property to query on DOM node.\n * @param {Boolean} [as_pixels=false] - Convert value to pixels, if applicable.\n * @param {Boolean} [as_float=false] - Convert value to float, if applicable.\n *\n * @returns {(String|Number)} - The CSS value to return.\n */\nfunction get_css_value(el, property, as_pixels = false, as_float = false) {\n    let value = window.getComputedStyle(el).getPropertyValue(property);\n    if (as_pixels || as_float) {\n        value = parseFloat(value) || 0.0;\n    }\n    if (as_pixels && !as_float) {\n        value = parseInt(Math.round(value), 10);\n    }\n    return value;\n}\n\n/**\n * Find a scrollable element up in the DOM tree.\n *\n * Note: Setting the ``overflow`` shorthand property also sets the individual overflow-y and overflow-y properties.\n *\n * @param {Node} el - The DOM element to start the search on.\n * @param {String} [direction=] - Not given: Search for any scrollable element up in the DOM tree.\n *                                ``x``: Search for a horizontally scrollable element.\n *                                ``y``: Search for a vertically scrollable element.\n * @param {(Node|null)} [fallback=document.body] - Fallback, if no scroll container can be found.\n *                                                     The default is to use document.body.\n *\n * @returns {Node} - Return the first scrollable element.\n *                   If no other element could be found, document.body would be returned.\n */\nconst find_scroll_container = (el, direction, fallback = document.body) => {\n    while (el && el !== document.body) {\n        if (!direction || direction === \"y\") {\n            let overflow_y = get_css_value(el, \"overflow-y\");\n            if ([\"auto\", \"scroll\"].includes(overflow_y)) {\n                return el;\n            }\n        }\n        if (!direction || direction === \"x\") {\n            let overflow_x = get_css_value(el, \"overflow-x\");\n            if ([\"auto\", \"scroll\"].includes(overflow_x)) {\n                return el;\n            }\n        }\n        el = el.parentElement;\n    }\n    return fallback;\n};\n\n/**\n * Get the horizontal scroll position.\n *\n * @param {Node} scroll_reference - The element to get the scroll position from.\n *\n * @returns {number} The horizontal scroll position.\n */\nconst get_scroll_x = (scroll_reference) => {\n    // scroll_listener == window: window.scrollX\n    // scroll_listener == html: html.scrollLeft == window.scrollX\n    // scroll_listener == DOM node: node.scrollLeft\n    return typeof scroll_reference.scrollLeft !== \"undefined\"\n        ? scroll_reference.scrollLeft\n        : scroll_reference.scrollX;\n};\n\n/**\n * Get the vertical scroll position.\n *\n * @param {Node} scroll_reference - The element to get the scroll position from.\n *\n * @returns {number} The vertical scroll position.\n */\nconst get_scroll_y = (scroll_reference) => {\n    // scroll_listener == window: window.scrollY\n    // scroll_listener == html: html.scrollTop == window.scrollY\n    // scroll_listener == DOM node: node.scrollTop\n    return typeof scroll_reference.scrollTop !== \"undefined\"\n        ? scroll_reference.scrollTop\n        : scroll_reference.scrollY;\n};\n\n/**\n * Get the elements position relative to another element.\n *\n * @param {Node} el - The DOM element to get the position for.\n * @param {Node} [reference_el=document.body] - The DOM element to get the position relative to.\n *\n * @returns {{top: number, left: number}} - The position of the element relative to the other element.\n */\nconst get_relative_position = (el, reference_el = document.body) => {\n    // Get the reference element to which against we calculate\n    // the relative position of the target.\n    // In case of a scroll container of window, we do not have\n    // getBoundingClientRect method, so get the body instead.\n    if (reference_el === window) {\n        reference_el = document.body;\n    }\n\n    // Calculate absolute [¹] position difference between\n    // scroll_container and scroll_target.\n    // Substract the container's border from the scrolling\n    // value, as this one isn't respected by\n    // getBoundingClientRect [²] and would lead to covered\n    // items [³].\n    // ¹) so that it doesn't make a difference, if the element\n    // is below or above the scrolling container. We just need\n    // to know the absolute difference.\n    // ²) Calculations are based from the viewport.\n    // ³) See:\n    //      https://docs.microsoft.com/en-us/previous-versions//hh781509(v=vs.85)\n    //      https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n    const left = Math.abs(\n        el.getBoundingClientRect().left +\n            reference_el.scrollLeft -\n            reference_el.getBoundingClientRect().left -\n            dom.get_css_value(reference_el, \"border-left-width\", true)\n    );\n    const top = Math.abs(\n        el.getBoundingClientRect().top +\n            reference_el.scrollTop -\n            reference_el.getBoundingClientRect().top -\n            dom.get_css_value(reference_el, \"border-top-width\", true)\n    );\n\n    return { top, left };\n};\n\n/**\n * Scroll to a given element.\n * The element will be scrolled to the top of the scroll container.\n *\n * @param {Node} el - The element which should be scrolled to.\n * @param {Node} scroll_container - The element which is scrollable.\n * @param {number} [offset=0] - Optional offset in pixels to stop scrolling before the target position. Can also be a negative number.\n * @param {string} [direction=\"top\"] - The direction to scroll to. Can be either \"top\", \"left\" or \"both\".\n */\nconst scroll_to_element = (el, scroll_container, offset = 0, direction = \"top\") => {\n    // Get the position of the element relative to the scroll container.\n    const position = get_relative_position(el, scroll_container);\n\n    const options = { behavior: \"auto\" };\n    if (direction === \"top\" || direction === \"both\") {\n        options.top = position.top - offset;\n    }\n    if (direction === \"left\" || direction === \"both\") {\n        options.left = position.left - offset;\n    }\n\n    // Scroll to the target position.\n    scroll_container.scrollTo(options);\n};\n\n/**\n * Scroll to the top of a scrolling container.\n *\n * @param {Node} [scroll_container = document.body] - The element which is scrollable.\n * @param {number} [offset=0] - Optional offset in pixels to stop scrolling before the target position. Can also be a negative number.\n */\nconst scroll_to_top = (scroll_container = document.body, offset = 0) => {\n    // Just scroll up, period.\n    scroll_container.scrollTo({ top: 0 - offset, behavior: \"auto\" });\n};\n\n/**\n * Scroll to the bottom of a scrolling container.\n *\n * @param {Node} [scroll_container = document.body] - The element which is scrollable.\n * @param {number} [offset=0] - Optional offset in pixels to stop scrolling before the target position. Can also be a negative number.\n */\nconst scroll_to_bottom = (scroll_container = document.body, offset = 0) => {\n    // Just scroll up, period.\n    //\n    const top = (scroll_container === window ? document.body : scroll_container)\n        .scrollHeight;\n    scroll_container.scrollTo({ top: top - offset, behavior: \"auto\" });\n};\n\n/**\n * Get data stored directly on the node instance.\n * We are using a prefix to make sure the data doesn't collide with other attributes.\n *\n * @param el {Node} - The DOM node from which we want to retrieve the data.\n * @param name {String} - The name of the variable. Note - this is stored on\n *                        the DOM node prefixed with the DATA_PREFIX.\n * @param default_value {Any} - Optional default value.\n * @returns {Any} - The value which is stored on the DOM node.\n */\nconst get_data = (el, name, default_value) => {\n    return el[`${DATA_PREFIX}${name}`] || default_value;\n};\n\n/**\n * Set and store data directly on the node instance.\n * We are using a prefix to make sure the data doesn't collide with other attributes.\n *\n * @param el {Node} - The DOM node which we want to store the data on.\n * @param name {String} - The name of the variable. Note - this is stored on\n *                        the DOM node prefixed with the DATA_PREFIX.\n * @param value {Any} - The value we want to store on the DOM node.\n */\nconst set_data = (el, name, value) => {\n    el[`${DATA_PREFIX}${name}`] = value;\n};\n\n/**\n * Delete a variable from the node instance.\n * We are using a prefix to make sure the data doesn't collide with other attributes.\n *\n * @param el {Node} - The DOM node which we want to delete the variable from.\n * @param name {String} - The name of the variable. Note - this is stored on\n *                        the DOM node prefixed with the DATA_PREFIX.\n */\nconst delete_data = (el, name) => {\n    delete el[`${DATA_PREFIX}${name}`];\n};\n\n/**\n * Simple template engine, based on JS template literal\n *\n * NOTE: This uses eval and would break if Content-Security-Policy does not\n *       allow 'unsafe-eval'.\n *       Because of this CSR problem the use of this method is not recommended.\n *\n * Please note: You cannot pass a template literal as template_string.\n * JavaScript itself would try to expand it and would fail.\n *\n * See: https://stackoverflow.com/a/37217166/1337474\n *\n * @param {String} template_string - The template string as a JavaScript template literal.\n *                                   For each variable in the template you have to use ``this``.\n *                                   E.g. if you pass ``{message: \"ok\"}`` as template_variables, you can use it like so:\n *                                   `<h1>${this.message}</h1>`\n * @param {Object} template_variables - Object literal with all the variables which should be used in the template.\n *\n * @returns {String} - Returns the a string as template expanded with the template_variables.\n */\nconst template = (template_string, template_variables = {}) => {\n    logger.warn(\n        \"Using dom.template is not recommended due to a problem with Content-Security-Policy.\"\n    );\n    return new Function(\"return `\" + template_string + \"`;\").call(template_variables);\n};\n\n/**\n * Get the visible ratio of an element compared to container.\n * If no container is given, the viewport is used.\n *\n * Note: currently only vertical ratio is supported.\n *\n * @param {Node} el - The element to get the visible ratio from.\n * @param {Node} [container] - The container to compare the element to.\n * @returns {number} - The visible ratio of the element.\n *                    0 means the element is not visible.\n *                    1 means the element is fully visible.\n */\nconst get_visible_ratio = (el, container) => {\n    if (!el) {\n        return 0;\n    }\n\n    const rect = el.getBoundingClientRect();\n    const container_rect =\n        container !== window\n            ? container.getBoundingClientRect()\n            : {\n                  top: 0,\n                  bottom: window.innerHeight,\n              };\n\n    let visible_ratio = 0;\n    if (rect.top < container_rect.bottom && rect.bottom > container_rect.top) {\n        const rect_height = rect.bottom - rect.top;\n        const visible_height =\n            Math.min(rect.bottom, container_rect.bottom) -\n            Math.max(rect.top, container_rect.top);\n        visible_ratio = visible_height / rect_height;\n    }\n\n    return visible_ratio;\n};\n\n/**\n * Get an escaped CSS selector for a given id string.\n *\n * id selectors should - but don't have to - start with a letter.\n * If the id starts with a number or a dash, it should be escaped.\n * This method does that for you.\n *\n * Alse see:\n * - https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\n * - https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape\n *\n * @param {String} id - The id to escape.\n *\n * @returns {String} - The escaped CSS selector.\n *\n * @example\n * escape_css_id_selector(\"#123\"); // returns \"#\\\\31 23\"\"\n * escape_css_id_selector(\"#-123\"); // returns \"#-\\\\31 23\"\n */\nconst escape_css_id = (id) => {\n    return `#${CSS.escape(id.split(\"#\")[1])}`;\n};\n\n/**\n * Set and get a universally unique id (uuid) for a DOM element.\n *\n * This method returns a uuid for the given element. On the first call it will\n * generate a uuid and store it on the element.\n *\n * @param {Node} el - The DOM node to get the uuid for.\n * @returns {String} - The uuid.\n */\nconst element_uuid = (el) => {\n    if (!get_data(el, \"uuid\", false)) {\n        set_data(el, \"uuid\", create_uuid());\n    }\n    return get_data(el, \"uuid\");\n};\n\n/**\n * Find a related form element.\n *\n * @param {Node} el - The DOM node to start the search from.\n * @returns {Node} - The closest form element.\n *\n * @example\n * find_form(document.querySelector(\"input\"));\n */\nconst find_form = (el) => {\n    // Prefer input.form which allows for input outside form elements and fall\n    // back to search for a parent form.\n    const form =\n        el.closest(\".pat-subform\") || // Special Patternslib subform concept has precedence.\n        el.form ||\n        el.querySelector(INPUT_SELECTOR)?.form ||\n        el.closest(\"form\");\n    return form;\n};\n\n/**\n * Find any input type.\n */\nconst find_inputs = (el) => {\n    return querySelectorAllAndMe(el, INPUT_SELECTOR);\n};\n\nconst dom = {\n    document_ready: document_ready,\n    toNodeArray: toNodeArray,\n    querySelectorAllAndMe: querySelectorAllAndMe,\n    wrap: wrap,\n    hide: hide,\n    show: show,\n    find_inputs: find_inputs,\n    find_parents: find_parents,\n    find_scoped: find_scoped,\n    get_parents: get_parents,\n    acquire_attribute: acquire_attribute,\n    is_visible: is_visible,\n    is_input: is_input,\n    is_button: is_button,\n    create_from_string: create_from_string,\n    get_css_value: get_css_value,\n    find_scroll_container: find_scroll_container,\n    get_scroll_x: get_scroll_x,\n    get_scroll_y: get_scroll_y,\n    get_relative_position: get_relative_position,\n    scroll_to_element: scroll_to_element,\n    scroll_to_top: scroll_to_top,\n    scroll_to_bottom: scroll_to_bottom,\n    get_data: get_data,\n    set_data: set_data,\n    delete_data: delete_data,\n    template: template,\n    get_visible_ratio: get_visible_ratio,\n    escape_css_id: escape_css_id,\n    element_uuid: element_uuid,\n    find_form: find_form,\n};\n\nexport default dom;\n"],"names":["log","logging","getLogger","BasePattern","static","parser_group_options","parser_multiple","undefined","parser_inherit","constructor","el","options","this","name","trigger","parser","jquery","uuid","create_uuid","dispatchEvent","Event","bubbles","cancelable","window","setTimeout","async","debug","parse","init","warn","emit_update","action","pattern","dom","events","update_event","one","event_name","event_callback","add_event_listener","once","destroy","disable_re","dont_catch_re","disabled","match","dont_catch","exec","location","search","info","__patternslib_registry","PATTERN_REGISTRY","__patternslib_registry_initialized","registry","patterns","document_ready","Object","keys","sort","join","scan","document","body","clear","transformPattern","content","transform","prototype","$","e","error","initPattern","$el","plog","matches","orderPatterns","includes","splice","indexOf","unshift","querySelector","Text","selectors","selector_string","map","selector","trim","replace","querySelectorAllAndMe","filter","closest","parentNode","reverse","classList","add","register","BLACKLIST","__patternslib_patterns_blacklist","Array","isArray","jquery_plugin","plugin_name","p1","toUpperCase","utils","jqueryPlugin","root","writer","Function","bind","oThis","TypeError","aArgs","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","Level","DEBUG","INFO","WARN","ERROR","FATAL","ConsoleWriter","Logger","parent","_loggers","_parent","_enabled","_level","setWriter","w","output","log_name","level","messages","console","path","split","route","length","entry","shift","push","_getFlag","flag","context","setEnabled","state","isEnabled","setLevel","getLevel","fatal","logconfig","getWriter","ArgumentParser","order","parameters","attribute","enum_values","enum_conflicts","groups","possible_groups","group_pattern","json_param_pattern","named_param_pattern","token_pattern","_camelCase","str","__","addAlias","alias","original","addGroupToSpec","spec","m","group","field","first_spec","first_name","dest","addArgument","value","choices","multiple","addJSONArgument","default_value","type","_typeof","choice","obj","_coerce","JSON","toLowerCase","num","parseInt","isNaN","toString","_set","opts","parts","part","v","_split","text","tokens","quoted","simple","_parseExtendedNotation","argstring","RegExp","arg","values","it","subopt","_parseShorthandNotation","parameter","i","sense","positional","_parse","sep","extended","_defaults","result","_cleanupOptions","group_options","target","inherit","stack","$possible_config_providers","final_length","hasClass","parents","addBack","provider","frame","data","attr","Math","max","results","removeDuplicateObjects","mergeStack","current_value","add_argument","crypto","randomUUID","array","Uint32Array","getRandomValues","event_listener_map","Map","remove_event_listener","id","els","removeEventListener","el_events","get","entries","regexp_from_wildcard","test","delete","size","UpdateEvent","CustomEvent","super","detail","event_type","cb","addEventListener","has","set","_cb","capture","await_event","Promise","resolve","await_pattern_init","reject","catch","Error","generic_event","blur_event","click_event","change_event","focus_event","input_event","mousedown_event","mouseup_event","scroll_event","submit_event","submitter","event","dragstart_event","dragend_event","safeClone","clone","forEach","callback","thisArg","T","k","O","len","kValue","singleBoundJQueryPlugin","method","each","pat","charAt","pluralBoundJQueryPlugin","$this","isObject","wildcard","regexp","isElementInViewport","partial","offset","rec","getBoundingClientRect","top","bottom","left","right","every","val","innerHeight","documentElement","clientHeight","innerWidth","clientWidth","escapeRegExp","extend","source","prop","hasOwnProperty","findLabel","input","$label","label","nodeType","tagName","form","removeWildcardClass","targets","classes","ensureArray","remove","matcher","class_list","getAttribute","ok","setAttribute","removeAttribute","hideOrShow","nodes","visible","pattern_name","toNodeArray","transitions","none","hide","show","fade","slide","duration","transition","effect","on_complete","t","easing","complete","addURLQueryParameter","fullURL","param","url","hash","newURL","objs","comparator","reduce","list","next_obj","is_duplicate","frame_length","x","hasValue","checked","selectedIndex","parseTime","time","amount","parseFloat","round","parseLength","reference_length","min","findRelatives","$relatives","$form","find","get_bounds","bounds","y","width","height","checkInputSupport","invalid_value","support","createElement","checkCSSFeature","tag","supported","style","animation_frame","requestAnimationFrame","timeout","ms","debounce","func","timer","postpone","last_run","args","Date","now","clearTimeout","isIE","documentMode","jqToNode","force_array","NodeList","isPrototypeOf","localized_isodate","date","day","getDate","padStart","month","getMonth","getFullYear","escape_html","html","appendChild","createTextNode","innerHTML","unescape_html","escaped_html","DOMParser","parseFromString","textContent","is_iso_date_time","optional_time","is_iso_date","date_diff","date_1","date_2","utc_1","UTC","utc_2","floor","threshold_list","num_steps","thresholds","is_option_truthy","option","elementInViewport","logger","DATA_PREFIX","DATA_STYLE_DISPLAY","INPUT_SELECTOR","querySelectorAll","all","get_css_value","property","as_pixels","as_float","getComputedStyle","getPropertyValue","get_relative_position","reference_el","abs","scrollLeft","scrollTop","get_data","set_data","fn","event_id","_ready","readyState","wrap","wrapper","insertBefore","display","find_inputs","find_parents","ret","find_scoped","get_parents","HTMLElement","acquire_attribute","include_empty","include_all","_el","parentElement","is_visible","offsetWidth","offsetHeight","is_input","nodeName","is_button","create_from_string","string","createRange","createContextualFragment","find_scroll_container","direction","fallback","overflow_y","overflow_x","get_scroll_x","scroll_reference","scrollX","get_scroll_y","scrollY","scroll_to_element","scroll_container","position","behavior","scrollTo","scroll_to_top","scroll_to_bottom","scrollHeight","delete_data","template","template_string","template_variables","get_visible_ratio","container","rect","container_rect","visible_ratio","rect_height","escape_css_id","CSS","escape","element_uuid","find_form"],"sourceRoot":""}